#!/bin/bash

INSTALLDIR=$(which inkporter)
INKSCAPEDIR=$(which inkscape)
VERSION="2.3.1"

# Unmark the two lines below if you are using Inkscape Flatpak
# shopt -s expand_aliases
# alias inkscape='flatpak run org.inkscape.Inkscape'

if [ "$1" = "--version" ] ; then
  echo "Inkporter v$VERSION"
  echo "Combined with" $(inkscape --version)
  exit 0
fi

if [ "$1" = "--enable-flatpak" ] ; then
  bash /usr/bin/inkporter-flatpak
  exit 0
fi

if [ "$1" = "--enable-native" ] ; then
  bash /usr/bin/inkporter-native
  exit 0
fi

if [ "$1" = "--deps-info" ] ; then
  echo "Version Ghostscript"
  gs --version 
  echo
  echo "Version WEBP"
  cwebp -version 
  echo
  echo "Version Inkscape"
  if inkscape --version | grep "Inkscape 1.*" ;then 
  echo " "; else
  echo 
  echo "DON'T GET STARTED, INKPORTER v$VERSION"
  echo "ONLY FOR INKSCAPE VERSION 1.O!";
  fi
  exit 0
fi

if [ "$1" = "--help" ] ; then
  echo
  echo "General Use:"
  echo "inkporter [FILE.svg] [OBJECT-ID]"
  echo "  Example: inkporter design.svg icon"
  echo ""
  echo "Special Parameters"
  echo "  --enable-flatpak      Use inkscape from  Flatpak"
  echo "  --enable-native       Use inkscape from system"
  echo "  --version             Showing inkporter version"
  echo "  --deps-info           Dependency informat ion"
  echo "  --help                Showing the help page"
  echo 
  echo "Inkporter v$VERSION"
  echo "https://catatan.raniaamina.id/tools/inkporter"
  echo
  exit 0
fi


echo " "
echo "Welcome to:"
echo " _       _                     _            
(_)_ __ | | ___ __   ___  _ __| |_ ___ _ __ 
| | '_ \| |/ / '_ \ / _ \| '__| __/ _ \ '__|
| | | | |   <| |_) | (_) | |  | ||  __/ |   
|_|_| |_|_|\_\ .__/ \___/|_|   \__\___|_|   
             |_| 
============================================"
echo "Inkporter Version: $VERSION"
echo " "
echo "Please select the output format  you want"
SOURCE=$1
IDPATTERN=$2
echo " "
PS3='Enter the number: '
options=("png" "jpg (CMYK)" "svg" "pdf" "pdf-cmyk" "eps-default" "booklet (CMYK)" "webp" "cancel")
select opt in "${options[@]}"
do
    case $opt in
        "png")
            echo
            echo "The file will be exported to the format  PNG"
            read -e -p "Define Export DPI (default 96 dpi): " -i "96" DPI
            read -e -p "Create a Folder to Store Yout Export Results " DIRECTORY
            mkdir -p $DIRECTORY
            for id in $(inkscape -S $SOURCE | grep $IDPATTERN | cut -d "," -f 1)
            do 
            inkscape -j -i $id -o "$DIRECTORY/$id.png" $SOURCE -d $DPI  &>> /tmp/inkporter-png.log
            echo "Processing $id to $DIRECTORY/$id.png"
            echo ""
            done
            break
            ;;
        "jpg (CMYK)")
            # dependency checking
            if convert --version | grep ImageMagick > /tmp/chectors; then 
            echo "ada"; else echo; echo "[ERROR!] ImageMagick not installed!"; echo; exit; fi
            # action when dependencies are met
            echo "The file will be exported to the format JPG"
            read -e -p "Set image background black/white (default white): " -i "white" BGCOLOR
            read -e -p "Select the colorspace you want to use RGB/CMYK (default CMYK): " -i "CMYK" COLORSPACE
            read -e -p "Create a Folder to Store Your Export Results: " DIRECTORY
            mkdir -p $DIRECTORY/.temp
            for id in $(inkscape -S $SOURCE | grep $IDPATTERN | cut -d "," -f 1)
            do 
            inkscape -j -i $id -o "$DIRECTORY/.temp/$id.png" $SOURCE -d 96 &>> /tmp/inkporter-jpg.log
            echo "Processing $id to $DIRECTORY/$id.jpg"
            echo ""
            done
            cd $DIRECTORY/.temp
            for i in *.png; do 
            echo "Optimizing $id.jpg" 
            convert "$i"  -background $BGCOLOR -flatten -quality 100 -colorspace $COLORSPACE "../${i%.*}.jpg";  
            done
            cd .. && rm -r .temp
            # cd .. 
            break
            ;;
        "svg")
            echo "The file will be exported to the format  SVG"
            echo "Make sure there are no clone objects in the document, the object ids are correct, and you're good to go today."
            read -e -p "Create a Folder to Store Your Export Results: " DIRECTORY
            mkdir -p $DIRECTORY
            for id in $(inkscape -S $SOURCE | grep $IDPATTERN | cut -d "," -f 1)
            do 
            inkscape -i $id -l -o "$DIRECTORY/$id.svg" $SOURCE --export-id-only &>> /tmp/inkporter-svg.log
            sleep 1
            echo "Processing $id to $DIRECTORY/$id.svg"
            echo
            done
            break
            ;;
        "pdf")
            echo "The file will be exported to the format PDF"
            read -e -p "Create a Folder to Store Your Export Results: " DIRECTORY
            mkdir -p $DIRECTORY/.temp
            for id in $(inkscape -S $SOURCE | grep $IDPATTERN | cut -d "," -f 1)
            do 
            inkscape -i $id -l -o "$DIRECTORY/.temp/$id.svg" $SOURCE --export-id-only &>> /tmp/inkporter-pdf.log
            echo "Processing $id to $DIRECTORY/$id.pdf"
            echo
            done
            cd $DIRECTORY/.temp
            for i in *.svg; do cat "$i" | inkscape --pipe -C -o "../${i%.*}.pdf"
            done
            cd .. && rm -r .temp
            cd .. 
            break
            ;;
         "pdf-cmyk")
            # dependency checking 
            if gs --version | grep . > /tmp/chectors; then 
            echo "ada"; else echo; echo "[ERROR!] Patot Ghostscript is not installed yet!"; echo; exit; fi
            #action when dependencies are met
            echo "The file will be exported to the format PDF (CMYK)"
            read -e -p "Create a Folder to Store Your Export Results: " DIRECTORY
            mkdir -p $DIRECTORY/.temp
            for id in $(inkscape -S $SOURCE | grep $IDPATTERN | cut -d "," -f 1)
            do 
            inkscape -i $id -l -o "$DIRECTORY/.temp/$id.svg" $SOURCE --export-id-only &>> /tmp/inkporter-pdf-cmyk.log
            echo "Processing $id to $DIRECTORY/$id.pdf"
            echo
            done
            cd $DIRECTORY/.temp
            for i in *.svg; do cat "$i" | inkscape --pipe -C -o "${i%.*}.pdf"
            done
            rm *.svg
            for i in *.pdf; do gs -q -dSAFER -dBATCH -dNOPAUSE -dNOCACHE -sDEVICE=pdfwrite -sColorConversionStrategy=CMYK -dProcessColorModel=/DeviceCMYK -sOutputFile="../${i%.*}.pdf" "$i"; &>> /tmp/inkporter-pdf-gs.log; 
            echo "File optimization $id.pdf to CMYK"
            sleep 1
            done
            cd .. && rm -r .temp && cd ..
            cd .. 
            break
            ;;
        "eps-default")
            echo "The file will be exported to the format EPS (Default)"
            read -e -p "Create a Folder to Store Your Export Results: " DIRECTORY
            mkdir -p $DIRECTORY/.temp
            for id in $(inkscape -S $SOURCE | grep $IDPATTERN | cut -d "," -f 1)
            do 
            inkscape -i $id -l -o "$DIRECTORY/.temp/$id.svg" $SOURCE --export-id-only &>> /tmp/inkporter-eps.log
            echo "Processing $id to $DIRECTORY/$id.eps"
            echo
            done
            cd $DIRECTORY/.temp
            for i in *.svg; do inkscape -C --export-ignore-filters -T --export-ps-level=3 -o "../${i%.*}.eps" "$i";
            echo "File optimization $id.eps"
            done
            cd .. && rm -r .temp
            cd .. 
            break
            ;;
        "booklet (CMYK)")
            # dependency checking 
            if gs --version | grep . > /tmp/chectors; then 
            echo "ada"; else echo; echo "[ERROR!] Patot Ghostscript is not installed yet!"; echo; exit; fi
            # action when dependencies are met
            echo "The file will be exported to the format PDF Booklet"
            read -e -p "Create a Folder to Store Your Export Results: " DIRECTORY
            mkdir -p $DIRECTORY/.temp
            for id in $(inkscape -S $SOURCE | grep $IDPATTERN | cut -d "," -f 1)
            do 
            inkscape -i $id -l -o "$DIRECTORY/.temp/$id.svg" $SOURCE --export-id-only &>> /tmp/inkporter-pdf.log
            echo "Processing $id to $DIRECTORY/$id.pdf"
            echo
            done
            cd $DIRECTORY/.temp
            for i in *.svg; do cat "$i" | inkscape --pipe -C -o "${i%.*}.pdf"
            done
            gs -q -sDEVICE=pdfwrite -dNOPAUSE -dBATCH -dSAFER -sOutputFile=../$DIRECTORY.pdf $(ls --sort=version *.pdf)  
            cd .. && rm -r .temp
            echo
            read -p "Want to convert a booklet into a PDF with CMYK? (Y/N) " -n 1 -r
            echo    # (optional) move to a new line
            if [[ $REPLY =~ ^[Yy]$ ]]
            then echo "Change $DIRECTORY.pdf to CMYK"
            gs -q -dSAFER -dBATCH -dNOPAUSE -dNOCACHE -sDEVICE=pdfwrite \
            -sColorConversionStrategy=CMYK -dProcessColorModel=/DeviceCMYK \
            -sOutputFile=$DIRECTORY-cmyk.pdf $DIRECTORY.pdf
            else exit
            fi
            cd .. 
            break
            ;;
        "webp")
        # dependency checking 
            if cwebp -version | grep . > /tmp/chectors; then 
            echo "ada"; else echo; echo "[ERROR!] Patot webp is not installed yet!"; echo; exit; fi
            # action when dependencies are met
            echo "The file will be exported to the format WEBP"
            read -e -p "Create a Folder to Store Your Export Results: " DIRECTORY
            mkdir -p $DIRECTORY/.temp
            for id in $(inkscape -S $SOURCE | grep $IDPATTERN | cut -d "," -f 1)
            do 
            inkscape -j -i $id -o "$DIRECTORY/.temp/$id.png" $SOURCE -d 96 &>> /tmp/inkporter-webp.log
            echo "Processing $id to $DIRECTORY/$id.webp"
            echo ""
            done
            cd $DIRECTORY/.temp
            for i in *.png; do 
            echo "Optimizing $id.webp" 
            cwebp -quiet "$i" -o "../${i%.*}.webp";  
            done
            cd .. && rm -r .temp
            # cd .. 
            break
            ;;
        "cancel")
            exit
            ;;
        *) echo "Wrong ndul, Repeat! $REPLY";;
    esac
done;
echo " "
echo "Congratulations, the file was successfully exported and saved in the folder '$DIRECTORY' "
echo " "
